/* Module dependencies */
const app = require("../app"); // Import the Express application
const debug = require("debug"); // Debugging utility for logging server events
const http = require("http"); // HTTP module to create the server

const serverDebug = debug("express:server"); // Create a debug instance for the server

/* Get port from environment and store in Express */
const port = process.env.PORT || 8008; // Normalize the port value
app.set("port", port); // Set the port for the Express application

/* Create HTTP server. */
const server = http.createServer(app); // Create an HTTP server using the Express app

/* Listen on provided port, on all network interfaces */
server.listen(port); // Start the server listening on the specified port
server.on("error", onError); // Listen for server errors
server.on("listening", onListening); // Listen for the server's listening event

/* Event listener for HTTP server "error" event */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error; // Re-throw the error if it's not a "listen" error
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port; // Determine the binding message

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`); // Insufficient permissions
      process.exit(1); // Exit the process
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`); // Port already in use
      process.exit(1); // Exit the process
      break;
    default:
      throw error; // Re-throw other errors
  }
}

/* Event listener for HTTP server "listening" event */
function onListening(res) {
  const addr = server.address(); // Get the server address
  const bind = addr
    ? typeof addr === "string"
      ? "pipe " + addr
      : "port " + addr.port
    : "unknown"; // Determine the binding message
  serverDebug("Listening on " + bind); // Log the server's listening status
  console.log("Live on Port 8008");
}
